diff --git a/app/server/ruby/bin/daemon.rb b/app/server/ruby/bin/daemon.rb
index c302e9fc4..f5807517e 100755
--- a/app/server/ruby/bin/daemon.rb
+++ b/app/server/ruby/bin/daemon.rb
@@ -1216,62 +1216,27 @@ module SonicPi
       end
 
       def run_pre_start_commands
-        case Util.os
-        when :linux, :raspberry
-          #Start Jack if not already running
-          if `jack_wait -c`.include? 'not running'
-            #Jack not running - start a new instance
-            Util.log "Jackd not running on system. Starting..."
-            @jack_booter = JackBooter.new
-          else
-            Util.log "Jackd already running. Not starting another server..."
-          end
-        end
+        # do nothing, no need to start jack server
       end
-            
+
       def run_post_start_commands
-        case Util.os
-        #modify case if you want linux as well as raspberry pi to use pipewire
-        when :raspberry #,:linux
-          Thread.new do
-            Kernel.sleep 5
-             hdmiL=`/usr/bin/pw-link -iI |grep -P '(hdmi).*(playback_FL)'|awk '{ print $1 }'`
-             hdmiR=`/usr/bin/pw-link -iI |grep -P '(hdmi).*(playback_FR)'|awk '{ print $1 }'`
-  
-             sco1=`/usr/bin/pw-link -oI |grep -P '(SuperCollider:out_1)' |awk '{ print $1 }'`
-             sco2=`/usr/bin/pw-link -oI |grep -P '(SuperCollider:out_2)' |awk '{ print $1 }'`
-  
-             system("pw-link  #{sco1.strip} #{hdmiL.strip}")
-             system("pw-link  #{sco2.strip} #{hdmiR.strip}")
-          end
-        #comment out this when section if you want linux to use pulseaudio as raspberry-pi above
-        when :linux
-          Thread.new do
-            Kernel.sleep 5
-            # Note:
-            # need to modify this to take account for @num_inputs and @num_outputs.
-            # These might not always be set to two channels each.
-            if @jack_booter
-              #First clear up any pulseaudio remains of module-loopback source=jack_in
-              `pactl list short modules |grep source=jack_in| cut -f1 | xargs -L1 pactl unload-module`
-              `pactl load-module module-jack-source channels=2 connect=0 client_name=JACK_to_PulseAudio`
-              `pactl load-module module-loopback source=jack_in`
-              `pactl load-module module-jack-sink channels=2 connect=0 client_name=PulseAudio_to_JACK`
-              `jack_connect PulseAudio_to_JACK:front-left SuperCollider:in_1`
-              `jack_connect PulseAudio_to_JACK:front-right SuperCollider:in_2`
-              `jack_connect SuperCollider:out_1 JACK_to_PulseAudio:front-left`
-              `jack_connect SuperCollider:out_2 JACK_to_PulseAudio:front-right`
-            else
-              `jack_connect SuperCollider:out_1 system:playback_1`
-              `jack_connect SuperCollider:out_2 system:playback_2`
-              `jack_connect SuperCollider:in_1 system:capture_1`
-              `jack_connect SuperCollider:in_2 system:capture_2`
-            end
+        Thread.new do
+          # wait for the SuperCollider outputs to be ready
+          until `pw-link -oI` =~ /SuperCollider/
+            sleep 1
           end
+
+          # link SuperCollider outputs to pipewire inputs
+          playbackL=`/usr/bin/pw-link -iI |grep -P '(alsa.+).*(playback_FL)'|awk '{ print $1 }'`
+          playbackR=`/usr/bin/pw-link -iI |grep -P '(alsa.+).*(playback_FR)'|awk '{ print $1 }'`
+          sco1=`/usr/bin/pw-link -oI |grep -P '(SuperCollider:out_1$)' |awk '{ print $1 }'`
+          sco2=`/usr/bin/pw-link -oI |grep -P '(SuperCollider:out_2$)' |awk '{ print $1 }'`
+
+          system("/usr/bin/pw-link  #{sco1.strip} #{playbackL.strip}")
+          system("/usr/bin/pw-link  #{sco2.strip} #{playbackR.strip}")
         end
       end
 
-
       def unify_toml_opts_hash(toml_opts_hash)
         opts = {}
 
